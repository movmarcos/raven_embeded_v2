CREATE OR REPLACE VIEW RAVEN.VW_LOG_STAGE_ME_STATUS_REPORTING AS
WITH STAGE_ME_STATUS_SPLITED AS (
	SELECT
		ID
		,MAX(REPLACE(VALUE:name::STRING,SPLIT_PART(VALUE:name::STRING,'/',-1),''))	AS BLOB_LOCATION
		,MAX(VALUE:last_modified::STRING)											AS BLOB_LAST_MODIFIED
		,SUM(CAST(VALUE:size AS INT))												AS BLOB_FILE_SIZE
	FROM RAVEN.LOG_STAGE_ME_STATUS AS S,TABLE (flatten(S.BLOB_FILE,'FILE_LIST', outer => FALSE)) F
	GROUP BY ID
)
,STAGE_ME_STATUS_TOTAL_ROW AS(
	SELECT
		ID,
		SUM(CAST(VALUE:rows_loaded AS INT)) 	AS ROWS_LOADED,
		SUM(CAST(VALUE:rows_parsed AS INT))	AS ROWS_PARSED
	FROM RAVEN.LOG_STAGE_ME_STATUS AS S,TABLE (flatten(S.PROCESS_RESULT ,'msg_copy_result', outer => FALSE)) F
	GROUP BY ID
)
,STAGE_ME_STATUS AS (
	SELECT 
		S.ID AS STAGING_LOG_ID,
		S.DATASET_NAME,
		CASE WHEN S.RAVEN_COBID = 19000101
			THEN TO_CHAR(S.START_TIMESTAMP,'YYYYMMDD')::INT
		ELSE S.RAVEN_COBID END RAVEN_COBID,
		SPLIT_PART(S.PROCESS_PARAMETERS['file_stage_me'],'/',-1) AS FILE_NAME,
		REPLACE(S.PROCESS_PARAMETERS['file_stage_me'],SPLIT_PART(S.PROCESS_PARAMETERS['file_stage_me'],'/',-1),'') AS FILE_PATH,
		S.START_TIMESTAMP,
		S.END_TIMESTAMP,
		datediff('second', S.START_TIMESTAMP, S.END_TIMESTAMP) 	AS STAGING_DURATION_SECONDS,
		S.PROCESS_STATUS										AS STAGE_ME_STATUS,
		S.PROCESS_RESULT										AS STAGE_ME_RESULT,
		to_timestamp_ntz(BLOB_LAST_MODIFIED::STRING, 'DY, DD MON YYYY HH24:MI:SS GMT') AS BLOB_LAST_MODIFIED,
		L.BLOB_LOCATION,
		ROUND(L.BLOB_FILE_SIZE,2)*1.00		AS BLOB_FILE_SIZE_KB,
		REPLACE(
			REPLACE(REPLACE(S.PROCESS_RESULT:"cmd_copy",'\\"','')
					,'",','",\n')
			,'FROM', '\n FROM \n') 				AS COPY_CMD,
		ROWS_LOADED,
		ROWS_PARSED
	FROM RAVEN.LOG_STAGE_ME_STATUS S
	LEFT JOIN STAGE_ME_STATUS_SPLITED 	L ON S.ID = L.ID
	LEFT JOIN STAGE_ME_STATUS_TOTAL_ROW R ON S.ID = R.ID
)
SELECT
	S.STAGING_LOG_ID,
	S.RAVEN_COBID,
	S.STAGE_ME_STATUS,
	S.DATASET_NAME,
	S.FILE_PATH,
  S.FILE_NAME,
	S.START_TIMESTAMP,
	S.END_TIMESTAMP,
	S.STAGING_DURATION_SECONDS,
	S.STAGE_ME_RESULT,
	S.COPY_CMD,
	S.BLOB_LAST_MODIFIED,
	S.BLOB_FILE_SIZE_KB,
	S.BLOB_FILE_SIZE_KB/1024 AS BLOB_FILE_SIZE_MB,
	S.BLOB_LOCATION,
	TO_TIMESTAMP(C.NEXT_BUSINESS_DAY || ' ' || P.EXPECTED_STAGE_TIME) AS EXPECTED_STAGING_TIMESTAMP,
	DATEDIFF('SECONDS',S.BLOB_LAST_MODIFIED, IFNULL(S.START_TIMESTAMP,current_timestamp)) WAIT_FOR_STAGING_SECONDS,
	DATEDIFF('MINUTES',(EXPECTED_STAGING_TIMESTAMP) ::TIMESTAMP_TZ,IFNULL(S.END_TIMESTAMP,convert_timezone('Europe/London', current_timestamp)::TIMESTAMP_TZ)) AS DATEDIFF_EXPECTED_END_STAGING_MINUTES,
	S.ROWS_LOADED,
	S.ROWS_PARSED,
	P.STAGE_NAME,
	P.SOURCE_FILE_AND_FIELD,
	P.SOURCE_FILE_NAME_PATTERN,
	P.CONTAINER_NAME,
	P.SOURCE_SYSTEM_CODE,
	P.SOURCE_FEED_CODE,
	P.IS_ENABLED,
	P.IS_TRIGGER_FILE,
	P.ALLOW_RELOAD,
	P.ENTITY_CODE,
	P.DEPARTMENT_CODE,
	P.REGION,
	P.MARKET,
	P.STAGING_SCOPE_FIELDS,
	P.IS_CLOUD_COPY,
	P.EXPECTED_STAGE_TIME,
	P.WAREHOUSE_SIZE,
	P.FOLDER_PATTERN_COB,
	P.FILE_NAME_COB,
	P.FOLDER_PATH_COB,
	P.FOLDER_PATTERN,
	O.LOWER_BOUND,
	O.UPPER_BOUND,
	O.BOUNDS,
	CASE 
    WHEN UPPER(STAGE_ME_STATUS) <> 'SUCCESS' 
        THEN NULL
    WHEN ROWS_LOADED BETWEEN LOWER_BOUND AND UPPER_BOUND 
        THEN 'OK ' || BOUNDS
    ELSE 'Out of bounds ' || BOUNDS 
	END AS EXPECTED_ROWS_STATUS,
	CASE 
		WHEN DATEDIFF_EXPECTED_END_STAGING_MINUTES IS NULL  THEN 'N/A'
		WHEN DATEDIFF_EXPECTED_END_STAGING_MINUTES <= 0 	THEN 'On Time'
		ELSE 'Overdue'
	END AS KPI_EXPECTED_END_STAGING,
	CASE
		WHEN S.START_TIMESTAMP	IS NOT NULL AND S.END_TIMESTAMP IS NULL 	THEN 'Staging started'
		WHEN S.END_TIMESTAMP 	IS NOT NULL 								THEN 'Staging finished'
		WHEN S.BLOB_LOCATION   	IS NULL 									THEN 'File not received'
		WHEN S.START_TIMESTAMP 	IS NULL 	AND S.BLOB_LOCATION IS NOT NULL THEN 'Staging not started'
		ELSE 'Unknow progress status' 
	END  AS STAGING_PROGRESS 
FROM 
	STAGE_ME_STATUS 							S
INNER JOIN 
	RAVEN.METADATA_CALENDAR 					C ON S.RAVEN_COBID = C.COBID
LEFT JOIN 
	RAVEN.VW_METADATA_STAGE_ME_PARAMETERS_COB	P 	ON P.DATASET_NAME = S.DATASET_NAME
												   AND P.RAVEN_COBID = S.RAVEN_COBID
LEFT JOIN 
	RAVEN.LOG_FILE_OUTLIER_BOUNDS 			O	ON O.DATASET_NAME = S.DATASET_NAME
