CREATE OR REPLACE VIEW RAVEN.VW_METADATA_STAGE_ME_PARAMETERS_COB AS
WITH LATEST_COBS AS(
SELECT 19000101 AS RAVEN_COBID 
UNION ALL
SELECT RAVEN_COBID FROM 
	(SELECT 
		COBID AS RAVEN_COBID 
	 FROM RAVEN.METADATA_CALENDAR
	WHERE MY_DATE <= current_date()
	ORDER BY COBID DESC
	LIMIT 180)
)
,METADATA_SOURCE_FILE_AND_FIELD_CONCAT_JSON AS
(
SELECT 
  SOURCE_SYSTEM_CODE,
  SOURCE_FEED_CODE,
  SOURCE_FILE_NAME_PATTERN,
  STAGE_NAME,
  TO_VARIANT(OBJECT_CONSTRUCT(*))  AS SRC
FROM RAVEN.VW_METADATA_SOURCE_FILE_AND_FIELD_CONCAT
)
,STAGE_ME_COB AS (
	SELECT
		C.RAVEN_COBID,
		F.STAGE_NAME,
		F.SOURCE_FILE_NAME_PATTERN,
		F.SRC AS SOURCE_FILE_AND_FIELD,
		P.DATASET_NAME, 
		P.CONTAINER_NAME, 
		P.FILE_PATH, 
		P.FILE_NAME,
		P.SOURCE_SYSTEM_CODE, 
		P.SOURCE_FEED_CODE, 
		P.IS_ENABLED, 
		P.IS_TRIGGER_FILE, 
		P.ALLOW_RELOAD, 
		P.ENTITY_CODE, 
		P.DEPARTMENT_CODE, 
		P.REGION, 
		P.MARKET,
		P.IS_CLOUD_COPY, 
		P.EXPECTED_STAGE_TIME,
		P.WAREHOUSE_SIZE,
		P.ALLOW_INFER_SCHEMA,
		P.TAGS
	FROM RAVEN.METADATA_STAGE_ME_PARAMETERS 					P
	INNER JOIN METADATA_SOURCE_FILE_AND_FIELD_CONCAT_JSON	F ON P.SOURCE_SYSTEM_CODE = F.SOURCE_SYSTEM_CODE 
											 				     AND P.SOURCE_FEED_CODE = F.SOURCE_FEED_CODE
	CROSS JOIN LATEST_COBS				    					C
	WHERE P.IS_ENABLED = TRUE
)
,STAGE_LIST AS (
SELECT 
	RAVEN_COBID,
	STAGE_NAME,
	SOURCE_FILE_AND_FIELD,
	DATASET_NAME,
	FILE_PATH,
	FILE_NAME,
	REPLACE(FILE_NAME,'.'||SPLIT_PART(FILE_NAME,'.',-1),'')  AS FILE_NAME_NO_EXTENSION,
	SPLIT_PART(FILE_NAME,'.',-1) AS FILE_EXTENSION,
	CASE
		WHEN NULLIF(SOURCE_FILE_NAME_PATTERN,'') IS NOT NULL
			THEN SOURCE_FILE_NAME_PATTERN
		ELSE FILE_NAME
	END AS SOURCE_FILE_NAME_PATTERN, 
	CONTAINER_NAME, 
	SOURCE_SYSTEM_CODE, 
	SOURCE_FEED_CODE, 
	IS_ENABLED, 
	IS_TRIGGER_FILE, 
	ALLOW_RELOAD, 
	ENTITY_CODE, 
	DEPARTMENT_CODE, 
	REGION, 
	MARKET,
	TO_VARIANT(parse_json(TO_JSON(OBJECT_CONSTRUCT(
	'ENTITY_CODE', ENTITY_CODE
	,'DEPARTMENT_CODE', DEPARTMENT_CODE
	,'REGION', REGION
	,'MARKET', MARKET
	)))) AS STAGING_SCOPE_FIELDS,
	IS_CLOUD_COPY, 
	EXPECTED_STAGE_TIME,
	WAREHOUSE_SIZE,
	ALLOW_INFER_SCHEMA,
	TAGS,
	LISTAGG(IFF(VALUE LIKE ':%:', TO_CHAR(TO_DATE(RAVEN_COBID::VARCHAR,'YYYYMMDD'),REPLACE(VALUE,':','')), '.*/'), '') WITHIN GROUP (ORDER BY INDEX ASC) FOLDER_PATTERN_COB,
	LISTAGG(IFF(VALUE LIKE ':%:', TO_CHAR(TO_DATE(RAVEN_COBID::VARCHAR,'YYYYMMDD'),REPLACE(VALUE,':','')), VALUE), '') WITHIN GROUP (ORDER BY INDEX ASC) FOLDER_PATH_COB
FROM STAGE_ME_COB SPLITTABLE, 
LATERAL STRTOK_SPLIT_TO_TABLE(IFF(LEFT(SPLITTABLE.FILE_PATH,1) != '/', '/','') || SPLITTABLE.FILE_PATH|| IFF(RIGHT(SPLITTABLE.FILE_PATH,1) != '/', '/',''), '|')
GROUP BY RAVEN_COBID,STAGE_NAME,SOURCE_FILE_AND_FIELD,SOURCE_FILE_NAME_PATTERN,DATASET_NAME,FILE_PATH,FILE_NAME,CONTAINER_NAME,SOURCE_SYSTEM_CODE,SOURCE_FEED_CODE, 
	IS_ENABLED,IS_TRIGGER_FILE,ALLOW_RELOAD,ENTITY_CODE,DEPARTMENT_CODE,REGION,MARKET,IS_CLOUD_COPY,EXPECTED_STAGE_TIME,WAREHOUSE_SIZE,ALLOW_INFER_SCHEMA,TAGS
)
SELECT
	S.*,
	RAVEN.FN_REPLACE_COB_PATTERN(S.FILE_NAME, S.RAVEN_COBID) FILE_NAME_COB,
	CASE WHEN FILE_PATH LIKE '%YYYY%'
		THEN '.*' || SUBSTRING(FOLDER_PATTERN_COB,4,1000) 
		ELSE '.*' || IFF(CHARINDEX('/', FOLDER_PATH_COB) = 1, SUBSTRING(FOLDER_PATH_COB,2,1000), FOLDER_PATH_COB) 
	END FOLDER_PATTERN
FROM STAGE_LIST S
